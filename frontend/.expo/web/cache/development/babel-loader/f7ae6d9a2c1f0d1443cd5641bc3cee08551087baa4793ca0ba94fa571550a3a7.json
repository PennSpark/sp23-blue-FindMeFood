{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'invariant';\nvar ChildListCollection = function () {\n  function ChildListCollection() {\n    _classCallCheck(this, ChildListCollection);\n    this._cellKeyToChildren = new Map();\n    this._childrenToCellKey = new Map();\n  }\n  _createClass(ChildListCollection, [{\n    key: \"add\",\n    value: function add(list, cellKey) {\n      var _this$_cellKeyToChild;\n      invariant(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n      this._cellKeyToChildren.set(cellKey, cellLists);\n      this._childrenToCellKey.set(list, cellKey);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n      invariant(cellKey != null, 'Trying to remove non-present child list');\n      this._childrenToCellKey.delete(list);\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n      invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      for (var listSet of this._cellKeyToChildren.values()) {\n        for (var list of listSet) {\n          fn(list);\n        }\n      }\n    }\n  }, {\n    key: \"forEachInCell\",\n    value: function forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];\n      for (var list of listSet) {\n        fn(list);\n      }\n    }\n  }, {\n    key: \"anyInCell\",\n    value: function anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];\n      for (var list of listSet) {\n        if (fn(list)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this._childrenToCellKey.size;\n    }\n  }]);\n  return ChildListCollection;\n}();\nexport { ChildListCollection as default };","map":{"version":3,"names":["invariant","ChildListCollection","_cellKeyToChildren","Map","_childrenToCellKey","list","cellKey","has","cellLists","get","Set","add","set","delete","size","fn","listSet","values"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/Lists/ChildListCollection.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection<TList> {\n  _cellKeyToChildren: Map<string, Set<TList>> = new Map();\n  _childrenToCellKey: Map<TList, string> = new Map();\n\n  add(list: TList, cellKey: string): void {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list: TList): void {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn: TList => void): void {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey: string, fn: TList => void): void {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey: string, fn: TList => boolean): boolean {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size(): number {\n    return this._childrenToCellKey.size;\n  }\n}\n"],"mappings":";;AAUA,OAAOA,SAAS,MAAM,WAAW;AAAC,IAEbC,mBAAmB;EAAA;IAAA;IAAA,KACtCC,kBAAkB,GAA4B,IAAIC,GAAG,EAAE;IAAA,KACvDC,kBAAkB,GAAuB,IAAID,GAAG,EAAE;EAAA;EAAA;IAAA;IAAA,OAElD,aAAIE,IAAW,EAAEC,OAAe,EAAQ;MAAA;MACtCN,SAAS,CACP,CAAC,IAAI,CAACI,kBAAkB,CAACG,GAAG,CAACF,IAAI,CAAC,EAClC,0CAA0C,CAC3C;MAED,IAAMG,SAAS,4BAAG,IAAI,CAACN,kBAAkB,CAACO,GAAG,CAACH,OAAO,CAAC,oCAAI,IAAII,GAAG,EAAE;MACnEF,SAAS,CAACG,GAAG,CAACN,IAAI,CAAC;MACnB,IAAI,CAACH,kBAAkB,CAACU,GAAG,CAACN,OAAO,EAAEE,SAAS,CAAC;MAE/C,IAAI,CAACJ,kBAAkB,CAACQ,GAAG,CAACP,IAAI,EAAEC,OAAO,CAAC;IAC5C;EAAC;IAAA;IAAA,OAED,gBAAOD,IAAW,EAAQ;MACxB,IAAMC,OAAO,GAAG,IAAI,CAACF,kBAAkB,CAACK,GAAG,CAACJ,IAAI,CAAC;MACjDL,SAAS,CAACM,OAAO,IAAI,IAAI,EAAE,yCAAyC,CAAC;MACrE,IAAI,CAACF,kBAAkB,CAACS,MAAM,CAACR,IAAI,CAAC;MAEpC,IAAMG,SAAS,GAAG,IAAI,CAACN,kBAAkB,CAACO,GAAG,CAACH,OAAO,CAAC;MACtDN,SAAS,CAACQ,SAAS,EAAE,2CAA2C,CAAC;MACjEA,SAAS,CAACK,MAAM,CAACR,IAAI,CAAC;MAEtB,IAAIG,SAAS,CAACM,IAAI,KAAK,CAAC,EAAE;QACxB,IAAI,CAACZ,kBAAkB,CAACW,MAAM,CAACP,OAAO,CAAC;MACzC;IACF;EAAC;IAAA;IAAA,OAED,iBAAQS,EAAiB,EAAQ;MAC/B,KAAK,IAAMC,OAAO,IAAI,IAAI,CAACd,kBAAkB,CAACe,MAAM,EAAE,EAAE;QACtD,KAAK,IAAMZ,IAAI,IAAIW,OAAO,EAAE;UAC1BD,EAAE,CAACV,IAAI,CAAC;QACV;MACF;IACF;EAAC;IAAA;IAAA,OAED,uBAAcC,OAAe,EAAES,EAAiB,EAAQ;MAAA;MACtD,IAAMC,OAAO,6BAAG,IAAI,CAACd,kBAAkB,CAACO,GAAG,CAACH,OAAO,CAAC,qCAAI,EAAE;MAC1D,KAAK,IAAMD,IAAI,IAAIW,OAAO,EAAE;QAC1BD,EAAE,CAACV,IAAI,CAAC;MACV;IACF;EAAC;IAAA;IAAA,OAED,mBAAUC,OAAe,EAAES,EAAoB,EAAW;MAAA;MACxD,IAAMC,OAAO,6BAAG,IAAI,CAACd,kBAAkB,CAACO,GAAG,CAACH,OAAO,CAAC,qCAAI,EAAE;MAC1D,KAAK,IAAMD,IAAI,IAAIW,OAAO,EAAE;QAC1B,IAAID,EAAE,CAACV,IAAI,CAAC,EAAE;UACZ,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd;EAAC;IAAA;IAAA,OAED,gBAAe;MACb,OAAO,IAAI,CAACD,kBAAkB,CAACU,IAAI;IACrC;EAAC;EAAA;AAAA;AAAA,SA1DkBb,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}