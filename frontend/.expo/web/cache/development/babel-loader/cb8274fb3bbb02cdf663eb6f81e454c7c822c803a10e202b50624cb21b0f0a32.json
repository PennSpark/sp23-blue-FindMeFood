{"ast":null,"code":"import View from \"../Components/View/View\";\nimport normalizeColor from \"../StyleSheet/normalizeColor\";\nimport { normalizeRect } from \"../StyleSheet/Rect\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function PressabilityDebugView(props) {\n  if (__DEV__) {\n    if (isEnabled()) {\n      var _hitSlop$bottom, _hitSlop$left, _hitSlop$right, _hitSlop$top;\n      var normalizedColor = normalizeColor(props.color);\n      if (typeof normalizedColor !== 'number') {\n        return null;\n      }\n      var baseColor = '#' + (normalizedColor != null ? normalizedColor : 0).toString(16).padStart(8, '0');\n      var hitSlop = normalizeRect(props.hitSlop);\n      return _jsx(View, {\n        pointerEvents: \"none\",\n        style: {\n          backgroundColor: baseColor.slice(0, -2) + '0F',\n          borderColor: baseColor.slice(0, -2) + '55',\n          borderStyle: 'dashed',\n          borderWidth: 1,\n          bottom: -((_hitSlop$bottom = hitSlop == null ? void 0 : hitSlop.bottom) != null ? _hitSlop$bottom : 0),\n          left: -((_hitSlop$left = hitSlop == null ? void 0 : hitSlop.left) != null ? _hitSlop$left : 0),\n          position: 'absolute',\n          right: -((_hitSlop$right = hitSlop == null ? void 0 : hitSlop.right) != null ? _hitSlop$right : 0),\n          top: -((_hitSlop$top = hitSlop == null ? void 0 : hitSlop.top) != null ? _hitSlop$top : 0)\n        }\n      });\n    }\n  }\n  return null;\n}\nvar isDebugEnabled = false;\nexport function isEnabled() {\n  if (__DEV__) {\n    return isDebugEnabled;\n  }\n  return false;\n}\nexport function setEnabled(value) {\n  if (__DEV__) {\n    isDebugEnabled = value;\n  }\n}","map":{"version":3,"names":["View","normalizeColor","normalizeRect","React","PressabilityDebugView","props","__DEV__","isEnabled","normalizedColor","color","baseColor","toString","padStart","hitSlop","backgroundColor","slice","borderColor","borderStyle","borderWidth","bottom","left","position","right","top","isDebugEnabled","setEnabled","value"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/Pressability/PressabilityDebug.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ColorValue} from '../StyleSheet/StyleSheet';\n\nimport View from '../Components/View/View';\nimport normalizeColor from '../StyleSheet/normalizeColor';\nimport {type RectOrSize, normalizeRect} from '../StyleSheet/Rect';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  color: ColorValue,\n  hitSlop: ?RectOrSize,\n|}>;\n\n/**\n * Displays a debug overlay to visualize press targets when enabled via the\n * React Native Inspector. Calls to this module should be guarded by `__DEV__`,\n * for example:\n *\n *   return (\n *     <View>\n *       {children}\n *       {__DEV__ ? (\n *         <PressabilityDebugView color=\"...\" hitSlop={props.hitSlop} />\n *       ) : null}\n *     </View>\n *   );\n *\n */\nexport function PressabilityDebugView(props: Props): React.Node {\n  if (__DEV__) {\n    if (isEnabled()) {\n      const normalizedColor = normalizeColor(props.color);\n      if (typeof normalizedColor !== 'number') {\n        return null;\n      }\n      const baseColor =\n        '#' + (normalizedColor ?? 0).toString(16).padStart(8, '0');\n      const hitSlop = normalizeRect(props.hitSlop);\n      return (\n        <View\n          pointerEvents=\"none\"\n          style={\n            // eslint-disable-next-line react-native/no-inline-styles\n            {\n              backgroundColor: baseColor.slice(0, -2) + '0F', // 15%\n              borderColor: baseColor.slice(0, -2) + '55', // 85%\n              borderStyle: 'dashed',\n              borderWidth: 1,\n              bottom: -(hitSlop?.bottom ?? 0),\n              left: -(hitSlop?.left ?? 0),\n              position: 'absolute',\n              right: -(hitSlop?.right ?? 0),\n              top: -(hitSlop?.top ?? 0),\n            }\n          }\n        />\n      );\n    }\n  }\n  return null;\n}\n\nlet isDebugEnabled = false;\n\nexport function isEnabled(): boolean {\n  if (__DEV__) {\n    return isDebugEnabled;\n  }\n  return false;\n}\n\nexport function setEnabled(value: boolean): void {\n  if (__DEV__) {\n    isDebugEnabled = value;\n  }\n}\n"],"mappings":"AAYA,OAAOA,IAAI;AACX,OAAOC,cAAc;AACrB,SAAyBC,aAAa;AACtC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC;AAsB/B,OAAO,SAASC,qBAAqB,CAACC,KAAY,EAAc;EAC9D,IAAIC,OAAO,EAAE;IACX,IAAIC,SAAS,EAAE,EAAE;MAAA;MACf,IAAMC,eAAe,GAAGP,cAAc,CAACI,KAAK,CAACI,KAAK,CAAC;MACnD,IAAI,OAAOD,eAAe,KAAK,QAAQ,EAAE;QACvC,OAAO,IAAI;MACb;MACA,IAAME,SAAS,GACb,GAAG,GAAG,CAACF,eAAe,WAAfA,eAAe,GAAI,CAAC,EAAEG,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC5D,IAAMC,OAAO,GAAGX,aAAa,CAACG,KAAK,CAACQ,OAAO,CAAC;MAC5C,OACE,KAAC,IAAI;QACH,aAAa,EAAC,MAAM;QACpB,KAAK,EAEH;UACEC,eAAe,EAAEJ,SAAS,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI;UAC9CC,WAAW,EAAEN,SAAS,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI;UAC1CE,WAAW,EAAE,QAAQ;UACrBC,WAAW,EAAE,CAAC;UACdC,MAAM,EAAE,qBAAEN,OAAO,oBAAPA,OAAO,CAAEM,MAAM,8BAAI,CAAC,CAAC;UAC/BC,IAAI,EAAE,mBAAEP,OAAO,oBAAPA,OAAO,CAAEO,IAAI,4BAAI,CAAC,CAAC;UAC3BC,QAAQ,EAAE,UAAU;UACpBC,KAAK,EAAE,oBAAET,OAAO,oBAAPA,OAAO,CAAES,KAAK,6BAAI,CAAC,CAAC;UAC7BC,GAAG,EAAE,kBAAEV,OAAO,oBAAPA,OAAO,CAAEU,GAAG,2BAAI,CAAC;QAC1B;MACD,EACD;IAEN;EACF;EACA,OAAO,IAAI;AACb;AAEA,IAAIC,cAAc,GAAG,KAAK;AAE1B,OAAO,SAASjB,SAAS,GAAY;EACnC,IAAID,OAAO,EAAE;IACX,OAAOkB,cAAc;EACvB;EACA,OAAO,KAAK;AACd;AAEA,OAAO,SAASC,UAAU,CAACC,KAAc,EAAQ;EAC/C,IAAIpB,OAAO,EAAE;IACXkB,cAAc,GAAGE,KAAK;EACxB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}