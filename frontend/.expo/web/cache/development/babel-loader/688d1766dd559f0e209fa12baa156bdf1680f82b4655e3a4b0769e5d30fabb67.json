{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Keyboard from \"../../Components/Keyboard/Keyboard\";\nimport ScrollView from \"../../Components/ScrollView/ScrollView\";\nimport View from \"../../Components/View/View\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport * as LogBoxData from \"../Data/LogBoxData\";\nimport LogBoxLog from \"../Data/LogBoxLog\";\nimport LogBoxInspectorCodeFrame from \"./LogBoxInspectorCodeFrame\";\nimport LogBoxInspectorFooter from \"./LogBoxInspectorFooter\";\nimport LogBoxInspectorHeader from \"./LogBoxInspectorHeader\";\nimport LogBoxInspectorMessageHeader from \"./LogBoxInspectorMessageHeader\";\nimport LogBoxInspectorReactFrames from \"./LogBoxInspectorReactFrames\";\nimport LogBoxInspectorStackFrames from \"./LogBoxInspectorStackFrames\";\nimport * as LogBoxStyle from \"./LogBoxStyle\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction LogBoxInspector(props) {\n  var logs = props.logs,\n    selectedIndex = props.selectedIndex;\n  var log = logs[selectedIndex];\n  React.useEffect(function () {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n  React.useEffect(function () {\n    if (logs.length > 1) {\n      var selected = selectedIndex;\n      var lastIndex = logs.length - 1;\n      var prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      var nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n  React.useEffect(function () {\n    Keyboard.dismiss();\n  }, []);\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n  if (log == null) {\n    return null;\n  }\n  return _jsxs(View, {\n    style: styles.root,\n    children: [_jsx(LogBoxInspectorHeader, {\n      onSelectIndex: props.onChangeSelectedIndex,\n      selectedIndex: selectedIndex,\n      total: logs.length,\n      level: log.level\n    }), _jsx(LogBoxInspectorBody, {\n      log: log,\n      onRetry: _handleRetry\n    }), _jsx(LogBoxInspectorFooter, {\n      onDismiss: props.onDismiss,\n      onMinimize: props.onMinimize,\n      level: log.level\n    })]\n  });\n}\nvar headerTitleMap = {\n  warn: 'Console Warning',\n  error: 'Console Error',\n  fatal: 'Uncaught Error',\n  syntax: 'Syntax Error',\n  component: 'Render Error'\n};\nfunction LogBoxInspectorBody(props) {\n  var _props$log$type;\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    collapsed = _React$useState2[0],\n    setCollapsed = _React$useState2[1];\n  React.useEffect(function () {\n    setCollapsed(true);\n  }, [props.log]);\n  var headerTitle = (_props$log$type = props.log.type) != null ? _props$log$type : headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];\n  if (collapsed) {\n    return _jsxs(_Fragment, {\n      children: [_jsx(LogBoxInspectorMessageHeader, {\n        collapsed: collapsed,\n        onPress: function onPress() {\n          return setCollapsed(!collapsed);\n        },\n        message: props.log.message,\n        level: props.log.level,\n        title: headerTitle\n      }), _jsxs(ScrollView, {\n        style: styles.scrollBody,\n        children: [_jsx(LogBoxInspectorCodeFrame, {\n          codeFrame: props.log.codeFrame\n        }), _jsx(LogBoxInspectorReactFrames, {\n          log: props.log\n        }), _jsx(LogBoxInspectorStackFrames, {\n          log: props.log,\n          onRetry: props.onRetry\n        })]\n      })]\n    });\n  }\n  return _jsxs(ScrollView, {\n    style: styles.scrollBody,\n    children: [_jsx(LogBoxInspectorMessageHeader, {\n      collapsed: collapsed,\n      onPress: function onPress() {\n        return setCollapsed(!collapsed);\n      },\n      message: props.log.message,\n      level: props.log.level,\n      title: headerTitle\n    }), _jsx(LogBoxInspectorCodeFrame, {\n      codeFrame: props.log.codeFrame\n    }), _jsx(LogBoxInspectorReactFrames, {\n      log: props.log\n    }), _jsx(LogBoxInspectorStackFrames, {\n      log: props.log,\n      onRetry: props.onRetry\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor()\n  },\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(0.9),\n    flex: 1\n  }\n});\nexport default LogBoxInspector;","map":{"version":3,"names":["Keyboard","ScrollView","View","StyleSheet","LogBoxData","LogBoxLog","LogBoxInspectorCodeFrame","LogBoxInspectorFooter","LogBoxInspectorHeader","LogBoxInspectorMessageHeader","LogBoxInspectorReactFrames","LogBoxInspectorStackFrames","LogBoxStyle","React","LogBoxInspector","props","logs","selectedIndex","log","useEffect","symbolicateLogNow","length","selected","lastIndex","prevIndex","nextIndex","symbolicateLogLazy","dismiss","_handleRetry","retrySymbolicateLogNow","styles","root","onChangeSelectedIndex","level","onDismiss","onMinimize","headerTitleMap","warn","error","fatal","syntax","component","LogBoxInspectorBody","useState","collapsed","setCollapsed","headerTitle","type","isComponentError","message","scrollBody","codeFrame","onRetry","create","flex","backgroundColor","getTextColor","getBackgroundColor"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Keyboard from '../../Components/Keyboard/Keyboard';\nimport ScrollView from '../../Components/ScrollView/ScrollView';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxData from '../Data/LogBoxData';\nimport LogBoxLog, {type LogLevel} from '../Data/LogBoxLog';\nimport LogBoxInspectorCodeFrame from './LogBoxInspectorCodeFrame';\nimport LogBoxInspectorFooter from './LogBoxInspectorFooter';\nimport LogBoxInspectorHeader from './LogBoxInspectorHeader';\nimport LogBoxInspectorMessageHeader from './LogBoxInspectorMessageHeader';\nimport LogBoxInspectorReactFrames from './LogBoxInspectorReactFrames';\nimport LogBoxInspectorStackFrames from './LogBoxInspectorStackFrames';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  onDismiss: () => void,\n  onChangeSelectedIndex: (index: number) => void,\n  onMinimize: () => void,\n  logs: $ReadOnlyArray<LogBoxLog>,\n  selectedIndex: number,\n  fatalType?: ?LogLevel,\n|}>;\n\nfunction LogBoxInspector(props: Props): React.Node {\n  const {logs, selectedIndex} = props;\n  let log = logs[selectedIndex];\n\n  React.useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n\n  React.useEffect(() => {\n    // Optimistically symbolicate the last and next logs.\n    if (logs.length > 1) {\n      const selected = selectedIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n\n  React.useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n\n  if (log == null) {\n    return null;\n  }\n\n  return (\n    <View style={styles.root}>\n      <LogBoxInspectorHeader\n        onSelectIndex={props.onChangeSelectedIndex}\n        selectedIndex={selectedIndex}\n        total={logs.length}\n        level={log.level}\n      />\n      <LogBoxInspectorBody log={log} onRetry={_handleRetry} />\n      <LogBoxInspectorFooter\n        onDismiss={props.onDismiss}\n        onMinimize={props.onMinimize}\n        level={log.level}\n      />\n    </View>\n  );\n}\n\nconst headerTitleMap = {\n  warn: 'Console Warning',\n  error: 'Console Error',\n  fatal: 'Uncaught Error',\n  syntax: 'Syntax Error',\n  component: 'Render Error',\n};\n\nfunction LogBoxInspectorBody(\n  props: $TEMPORARY$object<{log: LogBoxLog, onRetry: () => void}>,\n) {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  React.useEffect(() => {\n    setCollapsed(true);\n  }, [props.log]);\n\n  const headerTitle =\n    props.log.type ??\n    headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];\n\n  if (collapsed) {\n    return (\n      <>\n        <LogBoxInspectorMessageHeader\n          collapsed={collapsed}\n          onPress={() => setCollapsed(!collapsed)}\n          message={props.log.message}\n          level={props.log.level}\n          title={headerTitle}\n        />\n        <ScrollView style={styles.scrollBody}>\n          <LogBoxInspectorCodeFrame codeFrame={props.log.codeFrame} />\n          <LogBoxInspectorReactFrames log={props.log} />\n          <LogBoxInspectorStackFrames log={props.log} onRetry={props.onRetry} />\n        </ScrollView>\n      </>\n    );\n  }\n  return (\n    <ScrollView style={styles.scrollBody}>\n      <LogBoxInspectorMessageHeader\n        collapsed={collapsed}\n        onPress={() => setCollapsed(!collapsed)}\n        message={props.log.message}\n        level={props.log.level}\n        title={headerTitle}\n      />\n      <LogBoxInspectorCodeFrame codeFrame={props.log.codeFrame} />\n      <LogBoxInspectorReactFrames log={props.log} />\n      <LogBoxInspectorStackFrames log={props.log} onRetry={props.onRetry} />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor(),\n  },\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(0.9),\n    flex: 1,\n  },\n});\n\nexport default LogBoxInspector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}