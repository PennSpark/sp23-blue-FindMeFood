{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport SafeAreaView from \"../Components/SafeAreaView/SafeAreaView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ScrollView = require(\"../Components/ScrollView/ScrollView\");\nvar TouchableHighlight = require(\"../Components/Touchable/TouchableHighlight\");\nvar View = require(\"../Components/View/View\");\nvar StyleSheet = require(\"../StyleSheet/StyleSheet\");\nvar Text = require(\"../Text/Text\");\nvar ElementProperties = require(\"./ElementProperties\");\nvar NetworkOverlay = require(\"./NetworkOverlay\");\nvar PerformanceOverlay = require(\"./PerformanceOverlay\");\nvar React = require('react');\nvar InspectorPanel = function (_React$Component) {\n  _inherits(InspectorPanel, _React$Component);\n  var _super = _createSuper(InspectorPanel);\n  function InspectorPanel() {\n    _classCallCheck(this, InspectorPanel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(InspectorPanel, [{\n    key: \"renderWaiting\",\n    value: function renderWaiting() {\n      if (this.props.inspecting) {\n        return _jsx(Text, {\n          style: styles.waitingText,\n          children: \"Tap something to inspect it\"\n        });\n      }\n      return _jsx(Text, {\n        style: styles.waitingText,\n        children: \"Nothing is inspected\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var contents;\n      if (this.props.inspected) {\n        contents = _jsx(ScrollView, {\n          style: styles.properties,\n          children: _jsx(ElementProperties, {\n            style: this.props.inspected.style,\n            frame: this.props.inspected.frame,\n            source: this.props.inspected.source,\n            hierarchy: this.props.hierarchy,\n            selection: this.props.selection,\n            setSelection: this.props.setSelection\n          })\n        });\n      } else if (this.props.perfing) {\n        contents = _jsx(PerformanceOverlay, {});\n      } else if (this.props.networking) {\n        contents = _jsx(NetworkOverlay, {});\n      } else {\n        contents = _jsx(View, {\n          style: styles.waiting,\n          children: this.renderWaiting()\n        });\n      }\n      return _jsxs(SafeAreaView, {\n        style: styles.container,\n        children: [!this.props.devtoolsIsOpen && contents, _jsxs(View, {\n          style: styles.buttonRow,\n          children: [_jsx(InspectorPanelButton, {\n            title: 'Inspect',\n            pressed: this.props.inspecting,\n            onClick: this.props.setInspecting\n          }), _jsx(InspectorPanelButton, {\n            title: 'Perf',\n            pressed: this.props.perfing,\n            onClick: this.props.setPerfing\n          }), _jsx(InspectorPanelButton, {\n            title: 'Network',\n            pressed: this.props.networking,\n            onClick: this.props.setNetworking\n          }), _jsx(InspectorPanelButton, {\n            title: 'Touchables',\n            pressed: this.props.touchTargeting,\n            onClick: this.props.setTouchTargeting\n          })]\n        })]\n      });\n    }\n  }]);\n  return InspectorPanel;\n}(React.Component);\nvar InspectorPanelButton = function (_React$Component2) {\n  _inherits(InspectorPanelButton, _React$Component2);\n  var _super2 = _createSuper(InspectorPanelButton);\n  function InspectorPanelButton() {\n    _classCallCheck(this, InspectorPanelButton);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(InspectorPanelButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n      return _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return _this.props.onClick(!_this.props.pressed);\n        },\n        style: [styles.button, this.props.pressed && styles.buttonPressed],\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: this.props.title\n        })\n      });\n    }\n  }]);\n  return InspectorPanelButton;\n}(React.Component);\nvar styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row'\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)'\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)'\n  },\n  properties: {\n    height: 200\n  },\n  waiting: {\n    height: 100\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white'\n  }\n});\nmodule.exports = InspectorPanel;","map":{"version":3,"names":["SafeAreaView","ScrollView","require","TouchableHighlight","View","StyleSheet","Text","ElementProperties","NetworkOverlay","PerformanceOverlay","React","InspectorPanel","props","inspecting","styles","waitingText","contents","inspected","properties","style","frame","source","hierarchy","selection","setSelection","perfing","networking","waiting","renderWaiting","container","devtoolsIsOpen","buttonRow","setInspecting","setPerfing","setNetworking","touchTargeting","setTouchTargeting","Component","InspectorPanelButton","onClick","pressed","button","buttonPressed","buttonText","title","create","flexDirection","backgroundColor","margin","height","justifyContent","alignItems","textAlign","color","fontSize","marginVertical","module","exports"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/Inspector/InspectorPanel.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\n\nimport SafeAreaView from '../Components/SafeAreaView/SafeAreaView';\n\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst TouchableHighlight = require('../Components/Touchable/TouchableHighlight');\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Text = require('../Text/Text');\nconst ElementProperties = require('./ElementProperties');\nconst NetworkOverlay = require('./NetworkOverlay');\nconst PerformanceOverlay = require('./PerformanceOverlay');\nconst React = require('react');\n\ntype Props = $ReadOnly<{|\n  devtoolsIsOpen: boolean,\n  inspecting: boolean,\n  setInspecting: (val: boolean) => void,\n  perfing: boolean,\n  setPerfing: (val: boolean) => void,\n  touchTargeting: boolean,\n  setTouchTargeting: (val: boolean) => void,\n  networking: boolean,\n  setNetworking: (val: boolean) => void,\n  hierarchy?: ?Array<{|name: string|}>,\n  selection?: ?number,\n  setSelection: number => mixed,\n  inspected?: ?$ReadOnly<{|\n    style?: ?ViewStyleProp,\n    frame?: ?$ReadOnly<{|\n      top?: ?number,\n      left?: ?number,\n      width?: ?number,\n      height: ?number,\n    |}>,\n    source?: ?{|\n      fileName?: string,\n      lineNumber?: number,\n    |},\n  |}>,\n|}>;\n\nclass InspectorPanel extends React.Component<Props> {\n  renderWaiting(): React.Node {\n    if (this.props.inspecting) {\n      return (\n        <Text style={styles.waitingText}>Tap something to inspect it</Text>\n      );\n    }\n    return <Text style={styles.waitingText}>Nothing is inspected</Text>;\n  }\n\n  render(): React.Node {\n    let contents;\n    if (this.props.inspected) {\n      contents = (\n        <ScrollView style={styles.properties}>\n          <ElementProperties\n            style={this.props.inspected.style}\n            frame={this.props.inspected.frame}\n            source={this.props.inspected.source}\n            // $FlowFixMe[incompatible-type] : Hierarchy should be non-nullable\n            hierarchy={this.props.hierarchy}\n            selection={this.props.selection}\n            setSelection={this.props.setSelection}\n          />\n        </ScrollView>\n      );\n    } else if (this.props.perfing) {\n      contents = <PerformanceOverlay />;\n    } else if (this.props.networking) {\n      contents = <NetworkOverlay />;\n    } else {\n      contents = <View style={styles.waiting}>{this.renderWaiting()}</View>;\n    }\n    return (\n      <SafeAreaView style={styles.container}>\n        {!this.props.devtoolsIsOpen && contents}\n        <View style={styles.buttonRow}>\n          <InspectorPanelButton\n            title={'Inspect'}\n            pressed={this.props.inspecting}\n            onClick={this.props.setInspecting}\n          />\n          <InspectorPanelButton\n            title={'Perf'}\n            pressed={this.props.perfing}\n            onClick={this.props.setPerfing}\n          />\n          <InspectorPanelButton\n            title={'Network'}\n            pressed={this.props.networking}\n            onClick={this.props.setNetworking}\n          />\n          <InspectorPanelButton\n            title={'Touchables'}\n            pressed={this.props.touchTargeting}\n            onClick={this.props.setTouchTargeting}\n          />\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n\ntype InspectorPanelButtonProps = $ReadOnly<{|\n  onClick: (val: boolean) => void,\n  pressed: boolean,\n  title: string,\n|}>;\n\nclass InspectorPanelButton extends React.Component<InspectorPanelButtonProps> {\n  render(): React.Node {\n    return (\n      <TouchableHighlight\n        onPress={() => this.props.onClick(!this.props.pressed)}\n        style={[styles.button, this.props.pressed && styles.buttonPressed]}>\n        <Text style={styles.buttonText}>{this.props.title}</Text>\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5,\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n  },\n  properties: {\n    height: 200,\n  },\n  waiting: {\n    height: 100,\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white',\n  },\n});\n\nmodule.exports = InspectorPanel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}