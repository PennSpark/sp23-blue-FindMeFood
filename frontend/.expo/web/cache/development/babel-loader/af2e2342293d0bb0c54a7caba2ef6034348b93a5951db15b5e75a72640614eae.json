{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nvar GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nvar googleApiKey;\nexport function setGoogleApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\nexport function googleGeocodeAsync(_x) {\n  return _googleGeocodeAsync.apply(this, arguments);\n}\nfunction _googleGeocodeAsync() {\n  _googleGeocodeAsync = _asyncToGenerator(function* (address) {\n    assertGoogleApiKey();\n    var result = yield requestGoogleApiAsync({\n      address: address\n    });\n    if (result.status === 'ZERO_RESULTS') {\n      return [];\n    }\n    assertGeocodeResults(result);\n    return result.results.map(geocodingResultToLocation);\n  });\n  return _googleGeocodeAsync.apply(this, arguments);\n}\nexport function googleReverseGeocodeAsync(_x2) {\n  return _googleReverseGeocodeAsync.apply(this, arguments);\n}\nfunction _googleReverseGeocodeAsync() {\n  _googleReverseGeocodeAsync = _asyncToGenerator(function* (options) {\n    assertGoogleApiKey();\n    var result = yield requestGoogleApiAsync({\n      latlng: options.latitude + \",\" + options.longitude\n    });\n    if (result.status === 'ZERO_RESULTS') {\n      return [];\n    }\n    assertGeocodeResults(result);\n    return result.results.map(reverseGeocodingResultToAddress);\n  });\n  return _googleReverseGeocodeAsync.apply(this, arguments);\n}\nfunction assertGeocodeResults(resultObject) {\n  var status = resultObject.status,\n    error_message = resultObject.error_message;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n    }\n    throw new CodedError(status, \"An error occurred during geocoding.\");\n  }\n}\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error('Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.');\n  }\n}\nfunction requestGoogleApiAsync(_x3) {\n  return _requestGoogleApiAsync.apply(this, arguments);\n}\nfunction _requestGoogleApiAsync() {\n  _requestGoogleApiAsync = _asyncToGenerator(function* (params) {\n    var query = Object.entries(params).map(function (entry) {\n      return entry[0] + \"=\" + encodeURI(entry[1]);\n    }).join('&');\n    var result = yield fetch(GOOGLE_API_URL + \"?key=\" + googleApiKey + \"&\" + query);\n    return yield result.json();\n  });\n  return _requestGoogleApiAsync.apply(this, arguments);\n}\nfunction geocodingResultToLocation(result) {\n  var location = result.geometry.location;\n  return {\n    latitude: location.lat,\n    longitude: location.lng\n  };\n}\nfunction reverseGeocodingResultToAddress(result) {\n  var address = {};\n  for (var _ref of result.address_components) {\n    var long_name = _ref.long_name;\n    var short_name = _ref.short_name;\n    var types = _ref.types;\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address;\n}","map":{"version":3,"mappings":"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","names":["CodedError","GOOGLE_API_URL","googleApiKey","setGoogleApiKey","apiKey","googleGeocodeAsync","address","assertGoogleApiKey","result","requestGoogleApiAsync","status","assertGeocodeResults","results","map","geocodingResultToLocation","googleReverseGeocodeAsync","options","latlng","latitude","longitude","reverseGeocodingResultToAddress","resultObject","error_message","Error","params","query","Object","entries","entry","encodeURI","join","fetch","json","location","geometry","lat","lng","address_components","long_name","short_name","types","includes","city","district","streetNumber","street","region","subregion","country","isoCountryCode","postalCode","name","formatted_address","replace"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/expo-location/src/LocationGoogleGeocoding.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { LocationGeocodedAddress, LocationGeocodedLocation } from './Location.types';\n\nconst GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nlet googleApiKey;\n\ntype GoogleApiGeocodingAddressComponent = {\n  long_name: string;\n  short_name: string;\n  types: string[];\n};\n\ntype GoogleApiGeocodingResult = {\n  address_components: GoogleApiGeocodingAddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n};\n\ntype GoogleApiGeocodingResponse = {\n  results: GoogleApiGeocodingResult[];\n  status: string;\n};\n\n// @needsAudit\n/**\n * Sets a Google API Key for using Google Maps Geocoding API which is used by default on Web\n * platform and can be enabled through `useGoogleMaps` option of `geocodeAsync` and `reverseGeocodeAsync`\n * methods. It might be useful for Android devices that do not have Google Play Services, hence no\n * Geocoder Service.\n * @param apiKey Google API key obtained from Google API Console. This API key must have `Geocoding API`\n * enabled, otherwise your geocoding requests will be denied.\n */\nexport function setGoogleApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nexport async function googleGeocodeAsync(address: string): Promise<LocationGeocodedLocation[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({ address });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(geocodingResultToLocation);\n}\n\nexport async function googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<LocationGeocodedAddress[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({\n    latlng: `${options.latitude},${options.longitude}`,\n  });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(reverseGeocodingResultToAddress);\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n/**\n * Makes sure the Google API key is set.\n */\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error(\n      'Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.'\n    );\n  }\n}\n\n/**\n * Generic and handy method for sending requests to Google Maps API endpoint.\n */\nasync function requestGoogleApiAsync(\n  params: { address: string } | { latlng: string }\n): Promise<GoogleApiGeocodingResponse> {\n  const query = Object.entries(params)\n    .map((entry) => `${entry[0]}=${encodeURI(entry[1])}`)\n    .join('&');\n  const result = await fetch(`${GOOGLE_API_URL}?key=${googleApiKey}&${query}`);\n  return await result.json();\n}\n\n/**\n * Converts Google's result to the location object.\n */\nfunction geocodingResultToLocation(result: GoogleApiGeocodingResult): LocationGeocodedLocation {\n  const { location } = result.geometry;\n  return {\n    latitude: location.lat,\n    longitude: location.lng,\n  };\n}\n\n/**\n * Converts Google's result to address object.\n */\nfunction reverseGeocodingResultToAddress(\n  result: GoogleApiGeocodingResult\n): LocationGeocodedAddress {\n  const address: Partial<LocationGeocodedAddress> = {};\n\n  for (const { long_name, short_name, types } of result.address_components) {\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address as LocationGeocodedAddress;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}