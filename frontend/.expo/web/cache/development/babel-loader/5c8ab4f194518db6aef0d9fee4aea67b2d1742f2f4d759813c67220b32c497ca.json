{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _NativeStatusBarManag;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport processColor from \"../../StyleSheet/processColor\";\nimport Platform from \"../../Utilities/Platform\";\nimport NativeStatusBarManagerAndroid from \"./NativeStatusBarManagerAndroid\";\nimport NativeStatusBarManagerIOS from \"./NativeStatusBarManagerIOS\";\nimport invariant from 'invariant';\nimport * as React from 'react';\nfunction mergePropsStack(propsStack, defaultValues) {\n  return propsStack.reduce(function (prev, cur) {\n    for (var prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, _objectSpread({}, defaultValues));\n}\nfunction createStackEntry(props) {\n  var _props$animated, _props$showHideTransi;\n  var animated = (_props$animated = props.animated) != null ? _props$animated : false;\n  var showHideTransition = (_props$showHideTransi = props.showHideTransition) != null ? _props$showHideTransi : 'fade';\n  return {\n    backgroundColor: props.backgroundColor != null ? {\n      value: props.backgroundColor,\n      animated: animated\n    } : null,\n    barStyle: props.barStyle != null ? {\n      value: props.barStyle,\n      animated: animated\n    } : null,\n    translucent: props.translucent,\n    hidden: props.hidden != null ? {\n      value: props.hidden,\n      animated: animated,\n      transition: showHideTransition\n    } : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible\n  };\n}\nvar StatusBar = function (_React$Component) {\n  _inherits(StatusBar, _React$Component);\n  var _super = _createSuper(StatusBar);\n  function StatusBar() {\n    var _this;\n    _classCallCheck(this, StatusBar);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._stackEntry = null;\n    return _this;\n  }\n  _createClass(StatusBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._stackEntry = StatusBar.pushStackEntry(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      StatusBar.popStackEntry(this._stackEntry);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }], [{\n    key: \"setHidden\",\n    value: function setHidden(hidden, animation) {\n      animation = animation || 'none';\n      StatusBar._defaultProps.hidden.value = hidden;\n      if (Platform.OS === 'ios') {\n        NativeStatusBarManagerIOS.setHidden(hidden, animation);\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setHidden(hidden);\n      }\n    }\n  }, {\n    key: \"setBarStyle\",\n    value: function setBarStyle(style, animated) {\n      animated = animated || false;\n      StatusBar._defaultProps.barStyle.value = style;\n      if (Platform.OS === 'ios') {\n        NativeStatusBarManagerIOS.setStyle(style, animated);\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setStyle(style);\n      }\n    }\n  }, {\n    key: \"setNetworkActivityIndicatorVisible\",\n    value: function setNetworkActivityIndicatorVisible(visible) {\n      if (Platform.OS !== 'ios') {\n        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');\n        return;\n      }\n      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n      NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n    }\n  }, {\n    key: \"setBackgroundColor\",\n    value: function setBackgroundColor(color, animated) {\n      if (Platform.OS !== 'android') {\n        console.warn('`setBackgroundColor` is only available on Android');\n        return;\n      }\n      animated = animated || false;\n      StatusBar._defaultProps.backgroundColor.value = color;\n      var processedColor = processColor(color);\n      if (processedColor == null) {\n        console.warn(\"`StatusBar.setBackgroundColor`: Color \" + color + \" parsed to null or undefined\");\n        return;\n      }\n      invariant(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');\n      NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n    }\n  }, {\n    key: \"setTranslucent\",\n    value: function setTranslucent(translucent) {\n      if (Platform.OS !== 'android') {\n        console.warn('`setTranslucent` is only available on Android');\n        return;\n      }\n      StatusBar._defaultProps.translucent = translucent;\n      NativeStatusBarManagerAndroid.setTranslucent(translucent);\n    }\n  }, {\n    key: \"pushStackEntry\",\n    value: function pushStackEntry(props) {\n      var entry = createStackEntry(props);\n      StatusBar._propsStack.push(entry);\n      StatusBar._updatePropsStack();\n      return entry;\n    }\n  }, {\n    key: \"popStackEntry\",\n    value: function popStackEntry(entry) {\n      var index = StatusBar._propsStack.indexOf(entry);\n      if (index !== -1) {\n        StatusBar._propsStack.splice(index, 1);\n      }\n      StatusBar._updatePropsStack();\n    }\n  }, {\n    key: \"replaceStackEntry\",\n    value: function replaceStackEntry(entry, props) {\n      var newEntry = createStackEntry(props);\n      var index = StatusBar._propsStack.indexOf(entry);\n      if (index !== -1) {\n        StatusBar._propsStack[index] = newEntry;\n      }\n      StatusBar._updatePropsStack();\n      return newEntry;\n    }\n  }]);\n  return StatusBar;\n}(React.Component);\nStatusBar._propsStack = [];\nStatusBar._defaultProps = createStackEntry({\n  backgroundColor: Platform.OS === 'android' ? (_NativeStatusBarManag = NativeStatusBarManagerAndroid.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',\n  barStyle: 'default',\n  translucent: false,\n  hidden: false,\n  networkActivityIndicatorVisible: false\n});\nStatusBar._updateImmediate = null;\nStatusBar._currentValues = null;\nStatusBar.currentHeight = Platform.OS === 'android' ? NativeStatusBarManagerAndroid.getConstants().HEIGHT : null;\nStatusBar._updatePropsStack = function () {\n  clearImmediate(StatusBar._updateImmediate);\n  StatusBar._updateImmediate = setImmediate(function () {\n    var oldProps = StatusBar._currentValues;\n    var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);\n    if (Platform.OS === 'ios') {\n      if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {\n        NativeStatusBarManagerIOS.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);\n      }\n      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n        NativeStatusBarManagerIOS.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');\n      }\n      if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {\n        NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);\n      }\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n      var processedColor = processColor(mergedProps.backgroundColor.value);\n      if (processedColor == null) {\n        console.warn(\"`StatusBar._updatePropsStack`: Color \" + mergedProps.backgroundColor.value + \" parsed to null or undefined\");\n      } else {\n        invariant(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');\n        NativeStatusBarManagerAndroid.setColor(processedColor, mergedProps.backgroundColor.animated);\n      }\n      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n        NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n      }\n      if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {\n        NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n      }\n    }\n    StatusBar._currentValues = mergedProps;\n  });\n};\nmodule.exports = StatusBar;","map":{"version":3,"names":["processColor","Platform","NativeStatusBarManagerAndroid","NativeStatusBarManagerIOS","invariant","React","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","animated","showHideTransition","backgroundColor","value","barStyle","translucent","hidden","transition","networkActivityIndicatorVisible","StatusBar","_stackEntry","pushStackEntry","popStackEntry","replaceStackEntry","animation","_defaultProps","OS","setHidden","style","setStyle","visible","console","warn","setNetworkActivityIndicatorVisible","color","processedColor","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","Component","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","currentHeight","HEIGHT","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {...defaultValues},\n  );\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated,\n            transition: showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack: Array<any> = [];\n\n  static _defaultProps: any = createStackEntry({\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean): void {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        // Activities are not translucent by default, so always set if true.\n        if (\n          !oldProps ||\n          oldProps.translucent !== mergedProps.translucent ||\n          mergedProps.translucent\n        ) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}