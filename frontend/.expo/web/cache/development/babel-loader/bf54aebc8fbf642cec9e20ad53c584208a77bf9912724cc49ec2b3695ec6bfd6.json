{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Animated from \"../../Animated/Animated\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport Platform from \"../../Utilities/Platform\";\nimport useMergeRefs from \"../../Utilities/useMergeRefs\";\nimport * as React from 'react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ScrollViewStickyHeaderWithForwardedRef = React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {\n  var inverted = props.inverted,\n    scrollViewHeight = props.scrollViewHeight,\n    hiddenOnScroll = props.hiddenOnScroll,\n    scrollAnimatedValue = props.scrollAnimatedValue,\n    _nextHeaderLayoutY = props.nextHeaderLayoutY;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    measured = _useState2[0],\n    setMeasured = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    layoutY = _useState4[0],\n    setLayoutY = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    layoutHeight = _useState6[0],\n    setLayoutHeight = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    translateY = _useState8[0],\n    setTranslateY = _useState8[1];\n  var _useState9 = useState(_nextHeaderLayoutY),\n    _useState10 = _slicedToArray(_useState9, 2),\n    nextHeaderLayoutY = _useState10[0],\n    setNextHeaderLayoutY = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isFabric = _useState12[0],\n    setIsFabric = _useState12[1];\n  var callbackRef = function callbackRef(ref) {\n    var _internalInstanceHand;\n    if (ref == null) {\n      return;\n    }\n    ref.setNextHeaderY = function (value) {\n      setNextHeaderLayoutY(value);\n    };\n    var _internalInstanceHandler = ref['_internalInstanceHandle'];\n    setIsFabric(Boolean(_internalInstanceHandler == null ? void 0 : (_internalInstanceHand = _internalInstanceHandler.stateNode) == null ? void 0 : _internalInstanceHand.canonical));\n  };\n  var ref = useMergeRefs(callbackRef, forwardedRef);\n  var offset = useMemo(function () {\n    return hiddenOnScroll === true ? Animated.diffClamp(scrollAnimatedValue.interpolate({\n      extrapolateLeft: 'clamp',\n      inputRange: [layoutY, layoutY + 1],\n      outputRange: [0, 1]\n    }).interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, -1]\n    }), -layoutHeight, 0) : null;\n  }, [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll]);\n  var _useState13 = useState(function () {\n      var inputRange = [-1, 0];\n      var outputRange = [0, 0];\n      var initialTranslateY = scrollAnimatedValue.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n      if (offset != null) {\n        return Animated.add(initialTranslateY, offset);\n      }\n      return initialTranslateY;\n    }),\n    _useState14 = _slicedToArray(_useState13, 2),\n    animatedTranslateY = _useState14[0],\n    setAnimatedTranslateY = _useState14[1];\n  var _haveReceivedInitialZeroTranslateY = useRef(true);\n  var _timer = useRef(null);\n  useEffect(function () {\n    if (translateY !== 0 && translateY != null) {\n      _haveReceivedInitialZeroTranslateY.current = false;\n    }\n  }, [translateY]);\n  var animatedValueListener = useCallback(function (_ref) {\n    var value = _ref.value;\n    var _debounceTimeout = Platform.OS === 'android' ? 15 : 64;\n    if (value === 0 && !_haveReceivedInitialZeroTranslateY.current) {\n      _haveReceivedInitialZeroTranslateY.current = true;\n      return;\n    }\n    if (_timer.current != null) {\n      clearTimeout(_timer.current);\n    }\n    _timer.current = setTimeout(function () {\n      if (value !== translateY) {\n        setTranslateY(value);\n      }\n    }, _debounceTimeout);\n  }, [translateY]);\n  useEffect(function () {\n    var inputRange = [-1, 0];\n    var outputRange = [0, 0];\n    if (measured) {\n      if (inverted === true) {\n        if (scrollViewHeight != null) {\n          var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;\n          if (stickStartPoint > 0) {\n            inputRange.push(stickStartPoint);\n            outputRange.push(0);\n            inputRange.push(stickStartPoint + 1);\n            outputRange.push(1);\n            var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;\n            if (collisionPoint > stickStartPoint) {\n              inputRange.push(collisionPoint, collisionPoint + 1);\n              outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);\n            }\n          }\n        }\n      } else {\n        inputRange.push(layoutY);\n        outputRange.push(0);\n        var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n        if (_collisionPoint >= layoutY) {\n          inputRange.push(_collisionPoint, _collisionPoint + 1);\n          outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);\n        } else {\n          inputRange.push(layoutY + 1);\n          outputRange.push(1);\n        }\n      }\n    }\n    var newAnimatedTranslateY = scrollAnimatedValue.interpolate({\n      inputRange: inputRange,\n      outputRange: outputRange\n    });\n    if (offset != null) {\n      newAnimatedTranslateY = Animated.add(newAnimatedTranslateY, offset);\n    }\n    var animatedListenerId;\n    if (isFabric) {\n      animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);\n    }\n    setAnimatedTranslateY(newAnimatedTranslateY);\n    return function () {\n      if (animatedListenerId) {\n        newAnimatedTranslateY.removeListener(animatedListenerId);\n      }\n      if (_timer.current != null) {\n        clearTimeout(_timer.current);\n      }\n    };\n  }, [nextHeaderLayoutY, measured, layoutHeight, layoutY, scrollViewHeight, scrollAnimatedValue, inverted, offset, animatedValueListener, isFabric]);\n  var _onLayout = function _onLayout(event) {\n    setLayoutY(event.nativeEvent.layout.y);\n    setLayoutHeight(event.nativeEvent.layout.height);\n    setMeasured(true);\n    props.onLayout(event);\n    var child = React.Children.only(props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n  var child = React.Children.only(props.children);\n  var passthroughAnimatedPropExplicitValues = isFabric && translateY != null ? {\n    style: {\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  } : null;\n  return _jsx(Animated.View, {\n    collapsable: false,\n    nativeID: props.nativeID,\n    onLayout: _onLayout,\n    ref: ref,\n    style: [child.props.style, styles.header, {\n      transform: [{\n        translateY: animatedTranslateY\n      }]\n    }],\n    passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues,\n    children: React.cloneElement(child, {\n      style: styles.fill,\n      onLayout: undefined\n    })\n  });\n});\nvar styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n    position: 'relative'\n  },\n  fill: {\n    flex: 1\n  }\n});\nexport default ScrollViewStickyHeaderWithForwardedRef;","map":{"version":3,"names":["Animated","StyleSheet","Platform","useMergeRefs","React","useCallback","useEffect","useMemo","useRef","useState","ScrollViewStickyHeaderWithForwardedRef","forwardRef","ScrollViewStickyHeader","props","forwardedRef","inverted","scrollViewHeight","hiddenOnScroll","scrollAnimatedValue","_nextHeaderLayoutY","nextHeaderLayoutY","measured","setMeasured","layoutY","setLayoutY","layoutHeight","setLayoutHeight","translateY","setTranslateY","setNextHeaderLayoutY","isFabric","setIsFabric","callbackRef","ref","setNextHeaderY","value","_internalInstanceHandler","Boolean","stateNode","canonical","offset","diffClamp","interpolate","extrapolateLeft","inputRange","outputRange","initialTranslateY","add","animatedTranslateY","setAnimatedTranslateY","_haveReceivedInitialZeroTranslateY","_timer","current","animatedValueListener","_debounceTimeout","OS","clearTimeout","setTimeout","stickStartPoint","push","collisionPoint","newAnimatedTranslateY","animatedListenerId","addListener","removeListener","_onLayout","event","nativeEvent","layout","y","height","onLayout","child","Children","only","children","passthroughAnimatedPropExplicitValues","style","transform","nativeID","styles","header","cloneElement","fill","undefined","create","zIndex","position","flex"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {LayoutEvent} from '../../Types/CoreEventTypes';\n\nimport Animated from '../../Animated/Animated';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\nimport * as React from 'react';\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react';\n\nexport type Props = $ReadOnly<{\n  children?: React.Element<$FlowFixMe>,\n  nextHeaderLayoutY: ?number,\n  onLayout: (event: LayoutEvent) => void,\n  scrollAnimatedValue: Animated.Value,\n  // Will cause sticky headers to stick at the bottom of the ScrollView instead\n  // of the top.\n  inverted: ?boolean,\n  // The height of the parent ScrollView. Currently only set when inverted.\n  scrollViewHeight: ?number,\n  nativeID?: ?string,\n  hiddenOnScroll?: ?boolean,\n}>;\n\ntype Instance = {\n  ...React.ElementRef<typeof Animated.View>,\n  setNextHeaderY: number => void,\n  ...\n};\n\nconst ScrollViewStickyHeaderWithForwardedRef: React.AbstractComponent<\n  Props,\n  Instance,\n> = React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {\n  const {\n    inverted,\n    scrollViewHeight,\n    hiddenOnScroll,\n    scrollAnimatedValue,\n    nextHeaderLayoutY: _nextHeaderLayoutY,\n  } = props;\n\n  const [measured, setMeasured] = useState<boolean>(false);\n  const [layoutY, setLayoutY] = useState<number>(0);\n  const [layoutHeight, setLayoutHeight] = useState<number>(0);\n  const [translateY, setTranslateY] = useState<?number>(null);\n  const [nextHeaderLayoutY, setNextHeaderLayoutY] =\n    useState<?number>(_nextHeaderLayoutY);\n  const [isFabric, setIsFabric] = useState<boolean>(false);\n\n  const callbackRef = (ref: Instance | null): void => {\n    if (ref == null) {\n      return;\n    }\n    ref.setNextHeaderY = value => {\n      setNextHeaderLayoutY(value);\n    };\n    // Avoid dot notation because at Meta, private properties are obfuscated.\n    // $FlowFixMe[prop-missing]\n    const _internalInstanceHandler = ref['_internalInstanceHandle']; // eslint-disable-line dot-notation\n    setIsFabric(Boolean(_internalInstanceHandler?.stateNode?.canonical));\n  };\n  const ref: (React.ElementRef<typeof Animated.View> | null) => void =\n    // $FlowFixMe[incompatible-type] - Ref is mutated by `callbackRef`.\n    useMergeRefs<Instance | null>(callbackRef, forwardedRef);\n\n  const offset = useMemo(\n    () =>\n      hiddenOnScroll === true\n        ? Animated.diffClamp(\n            scrollAnimatedValue\n              .interpolate({\n                extrapolateLeft: 'clamp',\n                inputRange: [layoutY, layoutY + 1],\n                outputRange: ([0, 1]: Array<number>),\n              })\n              .interpolate({\n                inputRange: [0, 1],\n                outputRange: ([0, -1]: Array<number>),\n              }),\n            -layoutHeight,\n            0,\n          )\n        : null,\n    [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll],\n  );\n\n  const [animatedTranslateY, setAnimatedTranslateY] = useState<Animated.Node>(\n    () => {\n      const inputRange: Array<number> = [-1, 0];\n      const outputRange: Array<number> = [0, 0];\n      const initialTranslateY = scrollAnimatedValue.interpolate({\n        inputRange,\n        outputRange,\n      });\n\n      if (offset != null) {\n        return Animated.add(initialTranslateY, offset);\n      }\n      return initialTranslateY;\n    },\n  );\n\n  const _haveReceivedInitialZeroTranslateY = useRef<boolean>(true);\n  const _timer = useRef<?TimeoutID>(null);\n\n  useEffect(() => {\n    if (translateY !== 0 && translateY != null) {\n      _haveReceivedInitialZeroTranslateY.current = false;\n    }\n  }, [translateY]);\n\n  // This is called whenever the (Interpolated) Animated Value\n  // updates, which is several times per frame during scrolling.\n  // To ensure that the Fabric ShadowTree has the most recent\n  // translate style of this node, we debounce the value and then\n  // pass it through to the underlying node during render.\n  // This is:\n  // 1. Only an issue in Fabric.\n  // 2. Worse in Android than iOS. In Android, but not iOS, you\n  //    can touch and move your finger slightly and still trigger\n  //    a \"tap\" event. In iOS, moving will cancel the tap in\n  //    both Fabric and non-Fabric. On Android when you move\n  //    your finger, the hit-detection moves from the Android\n  //    platform to JS, so we need the ShadowTree to have knowledge\n  //    of the current position.\n  const animatedValueListener = useCallback(\n    ({value}) => {\n      const _debounceTimeout: number = Platform.OS === 'android' ? 15 : 64;\n      // When the AnimatedInterpolation is recreated, it always initializes\n      // to a value of zero and emits a value change of 0 to its listeners.\n      if (value === 0 && !_haveReceivedInitialZeroTranslateY.current) {\n        _haveReceivedInitialZeroTranslateY.current = true;\n        return;\n      }\n      if (_timer.current != null) {\n        clearTimeout(_timer.current);\n      }\n      _timer.current = setTimeout(() => {\n        if (value !== translateY) {\n          setTranslateY(value);\n        }\n      }, _debounceTimeout);\n    },\n    [translateY],\n  );\n\n  useEffect(() => {\n    const inputRange: Array<number> = [-1, 0];\n    const outputRange: Array<number> = [0, 0];\n\n    if (measured) {\n      if (inverted === true) {\n        // The interpolation looks like:\n        // - Negative scroll: no translation\n        // - `stickStartPoint` is the point at which the header will start sticking.\n        //   It is calculated using the ScrollView viewport height so it is a the bottom.\n        // - Headers that are in the initial viewport will never stick, `stickStartPoint`\n        //   will be negative.\n        // - From 0 to `stickStartPoint` no translation. This will cause the header\n        //   to scroll normally until it reaches the top of the scroll view.\n        // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate\n        //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n        // - Past the collision with the next header y: no more translation. This will cause the\n        //   header to continue scrolling up and make room for the next sticky header.\n        //   In the case that there is no next header just translate equally to\n        //   scroll indefinitely.\n        if (scrollViewHeight != null) {\n          const stickStartPoint = layoutY + layoutHeight - scrollViewHeight;\n          if (stickStartPoint > 0) {\n            inputRange.push(stickStartPoint);\n            outputRange.push(0);\n            inputRange.push(stickStartPoint + 1);\n            outputRange.push(1);\n            // If the next sticky header has not loaded yet (probably windowing) or is the last\n            // we can just keep it sticked forever.\n            const collisionPoint =\n              (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;\n            if (collisionPoint > stickStartPoint) {\n              inputRange.push(collisionPoint, collisionPoint + 1);\n              outputRange.push(\n                collisionPoint - stickStartPoint,\n                collisionPoint - stickStartPoint,\n              );\n            }\n          }\n        }\n      } else {\n        // The interpolation looks like:\n        // - Negative scroll: no translation\n        // - From 0 to the y of the header: no translation. This will cause the header\n        //   to scroll normally until it reaches the top of the scroll view.\n        // - From header y to when the next header y hits the bottom edge of the header: translate\n        //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n        // - Past the collision with the next header y: no more translation. This will cause the\n        //   header to continue scrolling up and make room for the next sticky header.\n        //   In the case that there is no next header just translate equally to\n        //   scroll indefinitely.\n        inputRange.push(layoutY);\n        outputRange.push(0);\n        // If the next sticky header has not loaded yet (probably windowing) or is the last\n        // we can just keep it sticked forever.\n        const collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n        if (collisionPoint >= layoutY) {\n          inputRange.push(collisionPoint, collisionPoint + 1);\n          outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);\n        } else {\n          inputRange.push(layoutY + 1);\n          outputRange.push(1);\n        }\n      }\n    }\n\n    let newAnimatedTranslateY: Animated.Node = scrollAnimatedValue.interpolate({\n      inputRange,\n      outputRange,\n    });\n\n    if (offset != null) {\n      newAnimatedTranslateY = Animated.add(newAnimatedTranslateY, offset);\n    }\n\n    // add the event listener\n    let animatedListenerId;\n    if (isFabric) {\n      animatedListenerId = newAnimatedTranslateY.addListener(\n        animatedValueListener,\n      );\n    }\n\n    setAnimatedTranslateY(newAnimatedTranslateY);\n\n    // clean up the event listener and timer\n    return () => {\n      if (animatedListenerId) {\n        newAnimatedTranslateY.removeListener(animatedListenerId);\n      }\n      if (_timer.current != null) {\n        clearTimeout(_timer.current);\n      }\n    };\n  }, [nextHeaderLayoutY, measured, layoutHeight, layoutY, scrollViewHeight, scrollAnimatedValue, inverted, offset, animatedValueListener, isFabric]);\n\n  const _onLayout = (event: LayoutEvent) => {\n    setLayoutY(event.nativeEvent.layout.y);\n    setLayoutHeight(event.nativeEvent.layout.height);\n    setMeasured(true);\n\n    props.onLayout(event);\n    const child = React.Children.only(props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n\n  const child = React.Children.only(props.children);\n\n  // TODO T68319535: remove this if NativeAnimated is rewritten for Fabric\n  const passthroughAnimatedPropExplicitValues =\n    isFabric && translateY != null\n      ? {\n          style: {transform: [{translateY: translateY}]},\n        }\n      : null;\n\n  return (\n    /* $FlowFixMe[prop-missing] passthroughAnimatedPropExplicitValues isn't properly\n       included in the Animated.View flow type. */\n    <Animated.View\n      collapsable={false}\n      nativeID={props.nativeID}\n      onLayout={_onLayout}\n      ref={ref}\n      style={[\n        child.props.style,\n        styles.header,\n        {transform: [{translateY: animatedTranslateY}]},\n      ]}\n      passthroughAnimatedPropExplicitValues={\n        passthroughAnimatedPropExplicitValues\n      }>\n      {React.cloneElement(child, {\n        style: styles.fill, // We transfer the child style to the wrapper.\n        onLayout: undefined, // we call this manually through our this._onLayout\n      })}\n    </Animated.View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n    position: 'relative',\n  },\n  fill: {\n    flex: 1,\n  },\n});\n\nexport default ScrollViewStickyHeaderWithForwardedRef;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}