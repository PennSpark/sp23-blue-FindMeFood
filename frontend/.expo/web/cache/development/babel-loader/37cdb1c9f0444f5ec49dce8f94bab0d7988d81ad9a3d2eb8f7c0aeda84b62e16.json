{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar Info = _createClass(function Info() {\n  _classCallCheck(this, Info);\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n});\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\nvar _sampleRate = DEBUG ? 1 : null;\nvar FillRateHelper = function () {\n  function FillRateHelper(getFrameMetrics) {\n    _classCallCheck(this, FillRateHelper);\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n  _createClass(FillRateHelper, [{\n    key: \"activate\",\n    value: function activate() {\n      if (this._enabled && this._samplesStartTime == null) {\n        DEBUG && console.debug('FillRateHelper: activate');\n        this._samplesStartTime = global.performance.now();\n      }\n    }\n  }, {\n    key: \"deactivateAndFlush\",\n    value: function deactivateAndFlush() {\n      if (!this._enabled) {\n        return;\n      }\n      var start = this._samplesStartTime;\n      if (start == null) {\n        DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n        return;\n      }\n      if (this._info.sample_count < _minSampleCount) {\n        this._resetData();\n        return;\n      }\n      var total_time_spent = global.performance.now() - start;\n      var info = _objectSpread(_objectSpread({}, this._info), {}, {\n        total_time_spent: total_time_spent\n      });\n      if (DEBUG) {\n        var derived = {\n          avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n          avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n          avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n          any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n          any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n          mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n          mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n        };\n        for (var key in derived) {\n          derived[key] = Math.round(1000 * derived[key]) / 1000;\n        }\n        console.debug('FillRateHelper deactivateAndFlush: ', {\n          derived: derived,\n          info: info\n        });\n      }\n      _listeners.forEach(function (listener) {\n        return listener(info);\n      });\n      this._resetData();\n    }\n  }, {\n    key: \"computeBlankness\",\n    value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {\n      if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {\n        return 0;\n      }\n      var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n      this._info.sample_count++;\n      this._info.pixels_sampled += Math.round(visibleLength);\n      this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n      var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n      var now = global.performance.now();\n      if (this._anyBlankStartTime != null) {\n        this._info.any_blank_ms += now - this._anyBlankStartTime;\n      }\n      this._anyBlankStartTime = null;\n      if (this._mostlyBlankStartTime != null) {\n        this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n      }\n      this._mostlyBlankStartTime = null;\n      var blankTop = 0;\n      var first = cellsAroundViewport.first;\n      var firstFrame = this._getFrameMetrics(first, props);\n      while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.inLayout)) {\n        firstFrame = this._getFrameMetrics(first, props);\n        first++;\n      }\n      if (firstFrame && first > 0) {\n        blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n      }\n      var blankBottom = 0;\n      var last = cellsAroundViewport.last;\n      var lastFrame = this._getFrameMetrics(last, props);\n      while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.inLayout)) {\n        lastFrame = this._getFrameMetrics(last, props);\n        last--;\n      }\n      if (lastFrame && last < props.getItemCount(props.data) - 1) {\n        var bottomEdge = lastFrame.offset + lastFrame.length;\n        blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n      }\n      var pixels_blank = Math.round(blankTop + blankBottom);\n      var blankness = pixels_blank / visibleLength;\n      if (blankness > 0) {\n        this._anyBlankStartTime = now;\n        this._info.any_blank_speed_sum += scrollSpeed;\n        this._info.any_blank_count++;\n        this._info.pixels_blank += pixels_blank;\n        if (blankness > 0.5) {\n          this._mostlyBlankStartTime = now;\n          this._info.mostly_blank_count++;\n        }\n      } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n        this.deactivateAndFlush();\n      }\n      return blankness;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled() {\n      return this._enabled;\n    }\n  }, {\n    key: \"_resetData\",\n    value: function _resetData() {\n      this._anyBlankStartTime = null;\n      this._info = new Info();\n      this._mostlyBlankStartTime = null;\n      this._samplesStartTime = null;\n    }\n  }], [{\n    key: \"addListener\",\n    value: function addListener(callback) {\n      if (_sampleRate === null) {\n        console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n      }\n      _listeners.push(callback);\n      return {\n        remove: function remove() {\n          _listeners = _listeners.filter(function (listener) {\n            return callback !== listener;\n          });\n        }\n      };\n    }\n  }, {\n    key: \"setSampleRate\",\n    value: function setSampleRate(sampleRate) {\n      _sampleRate = sampleRate;\n    }\n  }, {\n    key: \"setMinSampleCount\",\n    value: function setMinSampleCount(minSampleCount) {\n      _minSampleCount = minSampleCount;\n    }\n  }]);\n  return FillRateHelper;\n}();\nmodule.exports = FillRateHelper;","map":{"version":3,"names":["Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","console","debug","global","performance","now","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","listener","props","cellsAroundViewport","scrollMetrics","getItemCount","data","last","first","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","firstFrame","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush","callback","warn","push","remove","filter","sampleRate","minSampleCount","module","exports"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/Lists/FillRateHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {FrameMetricProps} from './VirtualizedListProps';\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count: number = 0;\n  any_blank_ms: number = 0;\n  any_blank_speed_sum: number = 0;\n  mostly_blank_count: number = 0;\n  mostly_blank_ms: number = 0;\n  pixels_blank: number = 0;\n  pixels_sampled: number = 0;\n  pixels_scrolled: number = 0;\n  total_time_spent: number = 0;\n  sample_count: number = 0;\n}\n\ntype FrameMetrics = {\n  inLayout?: boolean,\n  length: number,\n  offset: number,\n  ...\n};\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime: ?number = null;\n  _enabled = false;\n  _getFrameMetrics: (index: number, props: FrameMetricProps) => ?FrameMetrics;\n  _info: Info = new Info();\n  _mostlyBlankStartTime: ?number = null;\n  _samplesStartTime: ?number = null;\n\n  static addListener(callback: FillRateInfo => void): {\n    remove: () => void,\n    ...\n  } {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(\n    getFrameMetrics: (index: number, props: FrameMetricProps) => ?FrameMetrics,\n  ) {\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      ...FrameMetricProps,\n      initialNumToRender?: ?number,\n      ...\n    },\n    cellsAroundViewport: {\n      first: number,\n      last: number,\n      ...\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n      ...\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._getFrameMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.inLayout)\n    ) {\n      firstFrame = this._getFrameMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._getFrameMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.inLayout)\n    ) {\n      lastFrame = this._getFrameMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}