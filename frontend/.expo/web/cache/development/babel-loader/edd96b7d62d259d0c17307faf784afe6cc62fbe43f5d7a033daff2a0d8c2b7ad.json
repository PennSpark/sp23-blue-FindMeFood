{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport RCTDeviceEventEmitter from \"../EventEmitter/RCTDeviceEventEmitter\";\nimport NativeRedBox from \"../NativeModules/specs/NativeRedBox\";\nimport NativeBugReporting from \"./NativeBugReporting\";\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', function () {\n    return require(\"./dumpReactTree\")();\n  });\n}\nvar BugReporting = function () {\n  function BugReporting() {\n    _classCallCheck(this, BugReporting);\n  }\n  _createClass(BugReporting, null, [{\n    key: \"_maybeInit\",\n    value: function _maybeInit() {\n      if (!BugReporting._subscription) {\n        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);\n        defaultExtras();\n      }\n      if (!BugReporting._redboxSubscription) {\n        BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);\n      }\n    }\n  }, {\n    key: \"addSource\",\n    value: function addSource(key, callback) {\n      return this._addSource(key, callback, BugReporting._extraSources);\n    }\n  }, {\n    key: \"addFileSource\",\n    value: function addFileSource(key, callback) {\n      return this._addSource(key, callback, BugReporting._fileSources);\n    }\n  }, {\n    key: \"_addSource\",\n    value: function _addSource(key, callback, source) {\n      BugReporting._maybeInit();\n      if (source.has(key)) {\n        console.warn(\"BugReporting.add* called multiple times for same key '\" + key + \"'\");\n      }\n      source.set(key, callback);\n      return {\n        remove: function remove() {\n          source.delete(key);\n        }\n      };\n    }\n  }, {\n    key: \"collectExtraData\",\n    value: function collectExtraData() {\n      var extraData = {};\n      for (var _ref of BugReporting._extraSources) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var _key = _ref2[0];\n        var callback = _ref2[1];\n        extraData[_key] = callback();\n      }\n      var fileData = {};\n      for (var _ref3 of BugReporting._fileSources) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n        var _key2 = _ref4[0];\n        var _callback = _ref4[1];\n        fileData[_key2] = _callback();\n      }\n      if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n        NativeBugReporting.setExtraData(extraData, fileData);\n      }\n      if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n        NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n      }\n      return {\n        extras: extraData,\n        files: fileData\n      };\n    }\n  }]);\n  return BugReporting;\n}();\nBugReporting._extraSources = new Map();\nBugReporting._fileSources = new Map();\nBugReporting._subscription = null;\nBugReporting._redboxSubscription = null;\nmodule.exports = BugReporting;","map":{"version":3,"names":["RCTDeviceEventEmitter","NativeRedBox","NativeBugReporting","defaultExtras","BugReporting","addFileSource","require","_subscription","addListener","collectExtraData","_redboxSubscription","key","callback","_addSource","_extraSources","_fileSources","source","_maybeInit","has","console","warn","set","remove","delete","extraData","fileData","setExtraData","extras","files","Map","module","exports"],"sources":["/Users/jamesbaker/Desktop/spark_projs/sp23-blue-FindMeFood/frontend/node_modules/react-native/Libraries/BugReporting/BugReporting.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeBugReporting from './NativeBugReporting';\n\ntype ExtraData = {[key: string]: string, ...};\ntype SourceCallback = () => string;\ntype DebugData = {\n  extras: ExtraData,\n  files: ExtraData,\n  ...\n};\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () =>\n    require('./dumpReactTree')(),\n  );\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EventSubscription = null;\n  static _redboxSubscription: ?EventSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter.addListener(\n        'collectBugExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n      defaultExtras();\n    }\n\n    if (!BugReporting._redboxSubscription) {\n      BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener(\n        'collectRedBoxExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(\n    key: string,\n    callback: SourceCallback,\n    source: Map<string, SourceCallback>,\n  ): {remove: () => void, ...} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(\n        `BugReporting.add* called multiple times for same key '${key}'`,\n      );\n    }\n    source.set(key, callback);\n    return {\n      remove: () => {\n        source.delete(key);\n      },\n    };\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n\n    if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n      NativeBugReporting.setExtraData(extraData, fileData);\n    }\n\n    if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n      NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n    }\n\n    return {extras: extraData, files: fileData};\n  }\n}\n\nmodule.exports = BugReporting;\n"],"mappings":";;;AAUA,OAAOA,qBAAqB;AAC5B,OAAOC,YAAY;AAEnB,OAAOC,kBAAkB;AAUzB,SAASC,aAAa,GAAG;EACvBC,YAAY,CAACC,aAAa,CAAC,qBAAqB,EAAE;IAAA,OAChDC,OAAO,mBAAmB,EAAE;EAAA,EAC7B;AACH;AAAC,IAQKF,YAAY;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAMhB,sBAAoB;MAClB,IAAI,CAACA,YAAY,CAACG,aAAa,EAAE;QAC/BH,YAAY,CAACG,aAAa,GAAGP,qBAAqB,CAACQ,WAAW,CAC5D,qBAAqB,EAErBJ,YAAY,CAACK,gBAAgB,EAC7B,IAAI,CACL;QACDN,aAAa,EAAE;MACjB;MAEA,IAAI,CAACC,YAAY,CAACM,mBAAmB,EAAE;QACrCN,YAAY,CAACM,mBAAmB,GAAGV,qBAAqB,CAACQ,WAAW,CAClE,wBAAwB,EAExBJ,YAAY,CAACK,gBAAgB,EAC7B,IAAI,CACL;MACH;IACF;EAAC;IAAA;IAAA,OAUD,mBACEE,GAAW,EACXC,QAAwB,EACG;MAC3B,OAAO,IAAI,CAACC,UAAU,CAACF,GAAG,EAAEC,QAAQ,EAAER,YAAY,CAACU,aAAa,CAAC;IACnE;EAAC;IAAA;IAAA,OAUD,uBACEH,GAAW,EACXC,QAAwB,EACG;MAC3B,OAAO,IAAI,CAACC,UAAU,CAACF,GAAG,EAAEC,QAAQ,EAAER,YAAY,CAACW,YAAY,CAAC;IAClE;EAAC;IAAA;IAAA,OAED,oBACEJ,GAAW,EACXC,QAAwB,EACxBI,MAAmC,EACR;MAC3BZ,YAAY,CAACa,UAAU,EAAE;MACzB,IAAID,MAAM,CAACE,GAAG,CAACP,GAAG,CAAC,EAAE;QACnBQ,OAAO,CAACC,IAAI,4DAC+CT,GAAG,OAC7D;MACH;MACAK,MAAM,CAACK,GAAG,CAACV,GAAG,EAAEC,QAAQ,CAAC;MACzB,OAAO;QACLU,MAAM,EAAE,kBAAM;UACZN,MAAM,CAACO,MAAM,CAACZ,GAAG,CAAC;QACpB;MACF,CAAC;IACH;EAAC;IAAA;IAAA,OAQD,4BAAqC;MACnC,IAAMa,SAAoB,GAAG,CAAC,CAAC;MAC/B,iBAA8BpB,YAAY,CAACU,aAAa,EAAE;QAAA;QAAA,IAA9CH,IAAG;QAAA,IAAEC,QAAQ;QACvBY,SAAS,CAACb,IAAG,CAAC,GAAGC,QAAQ,EAAE;MAC7B;MACA,IAAMa,QAAmB,GAAG,CAAC,CAAC;MAC9B,kBAA8BrB,YAAY,CAACW,YAAY,EAAE;QAAA;QAAA,IAA7CJ,KAAG;QAAA,IAAEC,SAAQ;QACvBa,QAAQ,CAACd,KAAG,CAAC,GAAGC,SAAQ,EAAE;MAC5B;MAEA,IAAIV,kBAAkB,IAAI,IAAI,IAAIA,kBAAkB,CAACwB,YAAY,IAAI,IAAI,EAAE;QACzExB,kBAAkB,CAACwB,YAAY,CAACF,SAAS,EAAEC,QAAQ,CAAC;MACtD;MAEA,IAAIxB,YAAY,IAAI,IAAI,IAAIA,YAAY,CAACyB,YAAY,IAAI,IAAI,EAAE;QAC7DzB,YAAY,CAACyB,YAAY,CAACF,SAAS,EAAE,sBAAsB,CAAC;MAC9D;MAEA,OAAO;QAACG,MAAM,EAAEH,SAAS;QAAEI,KAAK,EAAEH;MAAQ,CAAC;IAC7C;EAAC;EAAA;AAAA;AArGGrB,YAAY,CACTU,aAAa,GAAgC,IAAIe,GAAG,EAAE;AADzDzB,YAAY,CAETW,YAAY,GAAgC,IAAIc,GAAG,EAAE;AAFxDzB,YAAY,CAGTG,aAAa,GAAuB,IAAI;AAH3CH,YAAY,CAITM,mBAAmB,GAAuB,IAAI;AAoGvDoB,MAAM,CAACC,OAAO,GAAG3B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}